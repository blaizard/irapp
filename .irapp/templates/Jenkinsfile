#!/usr/bin/env groovy

/**
 * It requires the following Jenkins plugins to work:
 * - Warnings Next Generation
 * - JUnit Plugin
 * - valgrind
 */

pipeline {

	agent none

	stages
	{
		%for platform, config in configs%
			/**
			 * This step is to ensure that the dockerfile is generated by only 1 worker to avoid
			 * multiple jobs to do the same operation.
			 */
			stage('Setup %platform%')
			{
				agent
				{
					dockerfile
					{
						filename '%config.dockerfilePath%'
					}
				}
				stages
				{
					stage('Setup %platform% Completed')
					{
						steps
						{
							echo 'Setup %platform% Completed'
						}
					}
				}
			}
			/**
			 * The actual tests are done here
			 */
			stage('Test %platform%')
			{
				parallel
				{
					%for buildName, options in config.builds%

						stage('%platform%%if buildName%.%buildName%%end%')
						{
							agent
							{
								dockerfile
								{
									filename '%config.dockerfilePath%'
								}
							}
							stages
							{
								stage('Build %platform%%if buildName%.%buildName%%end%')
								{
									steps
									{
										%if irapp-update% sh './app.py update' %end%
										sh './app.py init'
										sh './app.py build %for moduleId, buildConfig in options.configs% -c %moduleId%:%buildConfig% %end%'
									}
								}
								%if options.tests and not options.lint%
									stage('Test %platform%%if buildName%.%buildName%%end%')
									{
										steps
										{
											%if not options.memleaks%
												sh "./app.py run %for test in options.tests% --cmd '%test%' %end% -j0"
											%end%

											%if options.memleaks%
												sh "./app.py run %for index, test in options.tests% --cmd 'valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --gen-suppressions=all --suppressions=%options.valgrindSuppPath% --xml=yes --xml-file=%buildName%_tests_%index%_valgrind.xml %test%' %end% -j0"
											%end%
										}
									}
								%end%
							}
							post
							{
								always
								{
									// This is needed to avoid an error if there are no steps in this block
									echo 'Post platform %platform%%if buildName%.%buildName%%end%'

									%if options.compiler == "clang"%
										recordIssues enabledForFailure: true, aggregatingResults: true, id: "%platform%%if buildName%.%buildName%%end%", tools: [clang()]
									%end%
									%if options.compiler == "clang-tidy"%
										recordIssues enabledForFailure: true, aggregatingResults: true, id: "%platform%%if buildName%.%buildName%%end%", tools: [clangTidy()]
									%end%
									%if options.compiler == "gcc"%
										recordIssues enabledForFailure: true, aggregatingResults: true, id: "%platform%%if buildName%.%buildName%%end%", tools: [gcc4()]
									%end%
									%if options.compiler == "cppcheck"%
										recordIssues enabledForFailure: true, aggregatingResults: true, id: "%platform%%if buildName%.%buildName%%end%", tools: [cppCheck()]
									%end%
									%if options.compiler == "eslint"%
										recordIssues enabledForFailure: true, aggregatingResults: true, id: "%platform%%if buildName%.%buildName%%end%", tools: [eslint()]
									%end%

									%if options.junit%
										junit '*_junit.report'
									%end%

									%if options.memleaks%
										publishValgrind(pattern: '*_valgrind.xml', failThresholdInvalidReadWrite: '0', failThresholdDefinitelyLost: '0', failThresholdTotal: '0', unstableThresholdInvalidReadWrite: '0', unstableThresholdDefinitelyLost: '0', unstableThresholdTotal: '0', sourceSubstitutionPaths: '0', publishResultsForAbortedBuilds: true, publishResultsForFailedBuilds: true, failBuildOnMissingReports: true, failBuildOnInvalidReports: true)
									%end%

									%for name, link in options.links%
										%if link.type == "html"%
											publishHTML (target: [
												allowMissing: true,
												alwaysLinkToLastBuild: false,
												keepAll: true,
												reportDir: "%link.dirname%",
												reportFiles: "%link.basename%",
												reportName: "%name%"
											])
										%end%
									%end%
								}
							}
						}
					%end%
				}
			}
		%end%
	}
}
